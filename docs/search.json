[
  {
    "objectID": "course-materials/live-coding/2d_list_comprehensions.html",
    "href": "course-materials/live-coding/2d_list_comprehensions.html",
    "title": "Live Coding Session",
    "section": "",
    "text": "In this session, we will be exploring List and Dictionary comprehensions together. Live coding is a great way to learn programming as it allows you to see the process of writing code in real-time, including how to deal with unexpected issues and debug errors."
  },
  {
    "objectID": "course-materials/live-coding/2d_list_comprehensions.html#overview",
    "href": "course-materials/live-coding/2d_list_comprehensions.html#overview",
    "title": "Live Coding Session",
    "section": "",
    "text": "In this session, we will be exploring List and Dictionary comprehensions together. Live coding is a great way to learn programming as it allows you to see the process of writing code in real-time, including how to deal with unexpected issues and debug errors."
  },
  {
    "objectID": "course-materials/live-coding/2d_list_comprehensions.html#objectives",
    "href": "course-materials/live-coding/2d_list_comprehensions.html#objectives",
    "title": "Live Coding Session",
    "section": "Objectives",
    "text": "Objectives\n\nUnderstand the fundamentals of comprehensions in Python.\nApply comprehensions in practical examples.\nDevelop the ability to troubleshoot and debug in a live setting."
  },
  {
    "objectID": "course-materials/live-coding/2d_list_comprehensions.html#getting-started",
    "href": "course-materials/live-coding/2d_list_comprehensions.html#getting-started",
    "title": "Live Coding Session",
    "section": "Getting Started",
    "text": "Getting Started\nTo get the most out of this session, please follow these guidelines:\n\nPrepare Your Environment:\n\nMake sure JupyterLab is up and running on your machine.\nOpen a new Jupyter notebook where you can write your own code as we go along.\nMake sure to name the notebook something informative so you can refer back to it later.\n\nParticipation:\n\nTry to code along with me during the session.\nFeel free to ask questions at any time. Remember, if you have a question, others probably do too!\n\nResources:\n\nI will be sharing snippets of code and notes. Make sure to take your own notes and save snippets in your notebook for future reference."
  },
  {
    "objectID": "course-materials/live-coding/2d_list_comprehensions.html#session-format",
    "href": "course-materials/live-coding/2d_list_comprehensions.html#session-format",
    "title": "Live Coding Session",
    "section": "Session Format",
    "text": "Session Format\n\nIntroduction\n\nBrief discussion about the topic and its importance in data science.\n\n\n\nDemonstration\n\nI will demonstrate code examples live. Follow along and write the code into your own Jupyter notebook.\n\n\n\nPractice\n\nYou will have the opportunity to try exercises on your own to apply what you’ve learned.\n\n\n\nQ&A\n\nWe will have a Q&A session at the end where you can ask specific questions about the code, concepts, or issues encountered during the session."
  },
  {
    "objectID": "course-materials/live-coding/2d_list_comprehensions.html#after-the-session",
    "href": "course-materials/live-coding/2d_list_comprehensions.html#after-the-session",
    "title": "Live Coding Session",
    "section": "After the Session",
    "text": "After the Session\n\nReview your notes and try to replicate the exercises on your own.\nExperiment with the code by modifying parameters or adding new features to deepen your understanding.\nCheck out our class comprehensions cheatsheet."
  },
  {
    "objectID": "course-materials/live-coding/5a_selecting_and_filtering.html#overview",
    "href": "course-materials/live-coding/5a_selecting_and_filtering.html#overview",
    "title": "Live Coding Session",
    "section": "Overview",
    "text": "Overview\nIn this session, we will be exploring how to select and filter data from DataFrames."
  },
  {
    "objectID": "course-materials/live-coding/5a_selecting_and_filtering.html#objectives",
    "href": "course-materials/live-coding/5a_selecting_and_filtering.html#objectives",
    "title": "Live Coding Session",
    "section": "Objectives",
    "text": "Objectives\n\nApply various indexing methods to select rows and columns in dataframes.\nUse boolean logic to filter data based on values\nDevelop the ability to troubleshoot and debug in a live setting."
  },
  {
    "objectID": "course-materials/live-coding/5a_selecting_and_filtering.html#getting-started",
    "href": "course-materials/live-coding/5a_selecting_and_filtering.html#getting-started",
    "title": "Live Coding Session",
    "section": "Getting Started",
    "text": "Getting Started\nTo get the most out of this session, please follow these guidelines:\n\nPrepare Your Environment:\n\nMake sure JupyterLab is up and running on your machine.\nOpen a new Jupyter notebook where you can write your own code as we go along.\nMake sure to name the notebook something informative so you can refer back to it later.\n\nParticipation:\n\nTry to code along with me during the session.\nFeel free to ask questions at any time. Remember, if you have a question, others probably do too!\n\nResources:\n\nI will be sharing snippets of code and notes. Make sure to take your own notes and save snippets in your notebook for future reference."
  },
  {
    "objectID": "course-materials/live-coding/5a_selecting_and_filtering.html#session-format",
    "href": "course-materials/live-coding/5a_selecting_and_filtering.html#session-format",
    "title": "Live Coding Session",
    "section": "Session Format",
    "text": "Session Format\n\nIntroduction\n\nBrief discussion about the topic and its importance in data science.\n\n\n\nDemonstration\n\nI will demonstrate code examples live. Follow along and write the code into your own Jupyter notebook.\n\n\n\nPractice\n\nYou will have the opportunity to try exercises on your own to apply what you’ve learned.\n\n\n\nQ&A\n\nWe will have a Q&A session at the end where you can ask specific questions about the code, concepts, or issues encountered during the session."
  },
  {
    "objectID": "course-materials/live-coding/5a_selecting_and_filtering.html#after-the-session",
    "href": "course-materials/live-coding/5a_selecting_and_filtering.html#after-the-session",
    "title": "Live Coding Session",
    "section": "After the Session",
    "text": "After the Session\n\nReview your notes and try to replicate the exercises on your own.\nExperiment with the code by modifying parameters or adding new features to deepen your understanding.\nCheck out our class data selection and filtering cheatsheet."
  },
  {
    "objectID": "course-materials/live-coding/4d_data_import_export.html#overview",
    "href": "course-materials/live-coding/4d_data_import_export.html#overview",
    "title": "Live Coding Session",
    "section": "Overview",
    "text": "Overview\nIn this session, we will be exploring data import and export commands in pandas. Live coding is a great way to learn programming as it allows you to see the process of writing code in real-time, including how to deal with unexpected issues and debug errors."
  },
  {
    "objectID": "course-materials/live-coding/4d_data_import_export.html#objectives",
    "href": "course-materials/live-coding/4d_data_import_export.html#objectives",
    "title": "Live Coding Session",
    "section": "Objectives",
    "text": "Objectives\n\nUnderstand the fundamentals of flow control in Python.\nUse read_csv() options to handle different .csv file structures.\nUse to_csv() to write dataframes to .csv files.\nDevelop the ability to troubleshoot and debug in a live setting."
  },
  {
    "objectID": "course-materials/live-coding/4d_data_import_export.html#getting-started",
    "href": "course-materials/live-coding/4d_data_import_export.html#getting-started",
    "title": "Live Coding Session",
    "section": "Getting Started",
    "text": "Getting Started\nTo get the most out of this session, please follow these guidelines:\n\nPrepare Your Environment:\n\nMake sure JupyterLab is up and running on your machine.\nOpen a new Jupyter notebook where you can write your own code as we go along.\nMake sure to name the notebook something informative so you can refer back to it later.\n\nParticipation:\n\nTry to code along with me during the session.\nFeel free to ask questions at any time. Remember, if you have a question, others probably do too!\n\nResources:\n\nI will be sharing snippets of code and notes. Make sure to take your own notes and save snippets in your notebook for future reference."
  },
  {
    "objectID": "course-materials/live-coding/4d_data_import_export.html#session-format",
    "href": "course-materials/live-coding/4d_data_import_export.html#session-format",
    "title": "Live Coding Session",
    "section": "Session Format",
    "text": "Session Format\n\nIntroduction\n\nBrief discussion about the topic and its importance in data science.\n\n\n\nDemonstration\n\nI will demonstrate code examples live. Follow along and write the code into your own Jupyter notebook.\n\n\n\nPractice\n\nYou will have the opportunity to try exercises on your own to apply what you’ve learned.\n\n\n\nQ&A\n\nWe will have a Q&A session at the end where you can ask specific questions about the code, concepts, or issues encountered during the session."
  },
  {
    "objectID": "course-materials/live-coding/4d_data_import_export.html#after-the-session",
    "href": "course-materials/live-coding/4d_data_import_export.html#after-the-session",
    "title": "Live Coding Session",
    "section": "After the Session",
    "text": "After the Session\n\nReview your notes and try to replicate the exercises on your own.\nExperiment with the code by modifying parameters or adding new features to deepen your understanding.\nCheck out our class read_csv() cheatsheet."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows.html#overview",
    "href": "course-materials/live-coding/3a_control_flows.html#overview",
    "title": "Live Coding Session",
    "section": "Overview",
    "text": "Overview\nIn this session, we will be exploring Control Flows - if-elif, for, while and other ways of altering the flow of code execution. Live coding is a great way to learn programming as it allows you to see the process of writing code in real-time, including how to deal with unexpected issues and debug errors."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows.html#objectives",
    "href": "course-materials/live-coding/3a_control_flows.html#objectives",
    "title": "Live Coding Session",
    "section": "Objectives",
    "text": "Objectives\n\nUnderstand the fundamentals of flow control in Python.\nApply if-elif-else constructions in practical examples.\nUse for and while loops to iterate through collections.\nDevelop the ability to troubleshoot and debug in a live setting."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows.html#getting-started",
    "href": "course-materials/live-coding/3a_control_flows.html#getting-started",
    "title": "Live Coding Session",
    "section": "Getting Started",
    "text": "Getting Started\nTo get the most out of this session, please follow these guidelines:\n\nPrepare Your Environment:\n\nMake sure JupyterLab is up and running on your machine.\nOpen a new Jupyter notebook where you can write your own code as we go along.\nMake sure to name the notebook something informative so you can refer back to it later.\n\nParticipation:\n\nTry to code along with me during the session.\nFeel free to ask questions at any time. Remember, if you have a question, others probably do too!\n\nResources:\n\nI will be sharing snippets of code and notes. Make sure to take your own notes and save snippets in your notebook for future reference."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows.html#session-format",
    "href": "course-materials/live-coding/3a_control_flows.html#session-format",
    "title": "Live Coding Session",
    "section": "Session Format",
    "text": "Session Format\n\nIntroduction\n\nBrief discussion about the topic and its importance in data science.\n\n\n\nDemonstration\n\nI will demonstrate code examples live. Follow along and write the code into your own Jupyter notebook.\n\n\n\nPractice\n\nYou will have the opportunity to try exercises on your own to apply what you’ve learned.\n\n\n\nQ&A\n\nWe will have a Q&A session at the end where you can ask specific questions about the code, concepts, or issues encountered during the session."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows.html#after-the-session",
    "href": "course-materials/live-coding/3a_control_flows.html#after-the-session",
    "title": "Live Coding Session",
    "section": "After the Session",
    "text": "After the Session\n\nReview your notes and try to replicate the exercises on your own.\nExperiment with the code by modifying parameters or adding new features to deepen your understanding.\nCheck out our class flow control cheatsheet."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows_notes.html",
    "href": "course-materials/live-coding/3a_control_flows_notes.html",
    "title": "[Live Coding Notes]: Introduction to Control Flows in Python",
    "section": "",
    "text": "Control flows are essential for directing the execution of code based on logic and conditions.\n\n\nControl flows allow your programs to execute different parts of code based on conditions, or to repeat actions, which is crucial for handling varied datasets in environmental data science.\n\nConditionals: Execute code if a condition is true.\nLoops: Repeat code multiple times.\n\n\n\n\nConditionals help execute actions based on specific criteria.\n\n\nTeacher’s Note: Start with a simple if statement to check a numerical condition.\n\nnumber = 5\nif number &gt; 0:\n    print(\"Positive number\")\n\nPositive number\n\n\nExplanation: If number is greater than 0, it prints “Positive number”. This is useful for filtering data based on numeric thresholds.\n\n\n\nTeacher’s Note: Introduce the else statement to handle cases not met by the if condition.\n\nif number &gt; 0:\n    print(\"Positive number\")\nelse:\n    print(\"Not a positive number\")\n\nPositive number\n\n\nExplanation: If the if condition fails, the else block will execute, ensuring that all possibilities are handled.\n\n\n\nTeacher’s Note: Use elif to introduce a third logical condition.\n\nnumber = 0\nif number &gt; 0:\n    print(\"Positive number\")\nelif number == 0:\n    print(\"Zero\")\nelse:\n    print(\"Negative number\")\n\nZero\n\n\nExplanation: elif allows multiple checks. Useful for classifying data into more than two categories.\n\n\n\n\nLoops repeat tasks which is essential for automating repetitive tasks.\n\n\nTeacher’s Note: Demonstrate a for loop with a list.\n\nfruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)\n\napple\nbanana\ncherry\n\n\nExplanation: Loops through each item in the list fruits and prints it. Perfect for iterating over data records.\n\n\n\nTeacher’s Note: Show a while loop with a countdown.\n\ncount = 5\nwhile count &gt; 0:\n    print(count)\n    count -= 1\n\n5\n4\n3\n2\n1\n\n\nExplanation: This loop continues as long as count is greater than 0, counting down each time.\n\n\n\n\nControl flows can be applied for data processing such as cleaning or filtering.\n\n\nTeacher’s Note: Apply a practical data filtering example using pandas.\n\nimport pandas as pd\ndata = pd.DataFrame({\n    'Temperature': [18, 21, 24, 19, 17],\n    'Weather': ['rainy', 'sunny', 'sunny', 'cloudy', 'rainy']\n})\n\n# Only select days that are sunny\nsunny_days = data[data['Weather'] == 'sunny']\nprint(sunny_days)\n\n   Temperature Weather\n1           21   sunny\n2           24   sunny\n\n\nExplanation: Demonstrates using conditionals to filter a pandas DataFrame for specific data entries, such as sunny days.\n\n\n\n\nUnderstanding and using control flows effectively enhances your ability to programmatically analyze and manipulate data.\nTeacher’s Note: Summarize key points and encourage students to think of other data scenarios where these techniques could be applied. Discuss or hint at upcoming topics that build on these foundations."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows_notes.html#what-are-control-flows",
    "href": "course-materials/live-coding/3a_control_flows_notes.html#what-are-control-flows",
    "title": "[Live Coding Notes]: Introduction to Control Flows in Python",
    "section": "",
    "text": "Control flows allow your programs to execute different parts of code based on conditions, or to repeat actions, which is crucial for handling varied datasets in environmental data science.\n\nConditionals: Execute code if a condition is true.\nLoops: Repeat code multiple times."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows_notes.html#conditionals",
    "href": "course-materials/live-coding/3a_control_flows_notes.html#conditionals",
    "title": "[Live Coding Notes]: Introduction to Control Flows in Python",
    "section": "",
    "text": "Conditionals help execute actions based on specific criteria.\n\n\nTeacher’s Note: Start with a simple if statement to check a numerical condition.\n\nnumber = 5\nif number &gt; 0:\n    print(\"Positive number\")\n\nPositive number\n\n\nExplanation: If number is greater than 0, it prints “Positive number”. This is useful for filtering data based on numeric thresholds.\n\n\n\nTeacher’s Note: Introduce the else statement to handle cases not met by the if condition.\n\nif number &gt; 0:\n    print(\"Positive number\")\nelse:\n    print(\"Not a positive number\")\n\nPositive number\n\n\nExplanation: If the if condition fails, the else block will execute, ensuring that all possibilities are handled.\n\n\n\nTeacher’s Note: Use elif to introduce a third logical condition.\n\nnumber = 0\nif number &gt; 0:\n    print(\"Positive number\")\nelif number == 0:\n    print(\"Zero\")\nelse:\n    print(\"Negative number\")\n\nZero\n\n\nExplanation: elif allows multiple checks. Useful for classifying data into more than two categories."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows_notes.html#loops",
    "href": "course-materials/live-coding/3a_control_flows_notes.html#loops",
    "title": "[Live Coding Notes]: Introduction to Control Flows in Python",
    "section": "",
    "text": "Loops repeat tasks which is essential for automating repetitive tasks.\n\n\nTeacher’s Note: Demonstrate a for loop with a list.\n\nfruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)\n\napple\nbanana\ncherry\n\n\nExplanation: Loops through each item in the list fruits and prints it. Perfect for iterating over data records.\n\n\n\nTeacher’s Note: Show a while loop with a countdown.\n\ncount = 5\nwhile count &gt; 0:\n    print(count)\n    count -= 1\n\n5\n4\n3\n2\n1\n\n\nExplanation: This loop continues as long as count is greater than 0, counting down each time."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows_notes.html#applying-control-flows-in-data-science",
    "href": "course-materials/live-coding/3a_control_flows_notes.html#applying-control-flows-in-data-science",
    "title": "[Live Coding Notes]: Introduction to Control Flows in Python",
    "section": "",
    "text": "Control flows can be applied for data processing such as cleaning or filtering.\n\n\nTeacher’s Note: Apply a practical data filtering example using pandas.\n\nimport pandas as pd\ndata = pd.DataFrame({\n    'Temperature': [18, 21, 24, 19, 17],\n    'Weather': ['rainy', 'sunny', 'sunny', 'cloudy', 'rainy']\n})\n\n# Only select days that are sunny\nsunny_days = data[data['Weather'] == 'sunny']\nprint(sunny_days)\n\n   Temperature Weather\n1           21   sunny\n2           24   sunny\n\n\nExplanation: Demonstrates using conditionals to filter a pandas DataFrame for specific data entries, such as sunny days."
  },
  {
    "objectID": "course-materials/live-coding/3a_control_flows_notes.html#conclusion",
    "href": "course-materials/live-coding/3a_control_flows_notes.html#conclusion",
    "title": "[Live Coding Notes]: Introduction to Control Flows in Python",
    "section": "",
    "text": "Understanding and using control flows effectively enhances your ability to programmatically analyze and manipulate data.\nTeacher’s Note: Summarize key points and encourage students to think of other data scenarios where these techniques could be applied. Discuss or hint at upcoming topics that build on these foundations."
  },
  {
    "objectID": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html",
    "href": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html",
    "title": "Live Coding Session",
    "section": "",
    "text": "In this session, we will be exploring List and Dictionary comprehensions together. Live coding is a great way to learn programming as it allows you to see the process of writing code in real-time, including how to deal with unexpected issues and debug errors."
  },
  {
    "objectID": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html#overview",
    "href": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html#overview",
    "title": "Live Coding Session",
    "section": "",
    "text": "In this session, we will be exploring List and Dictionary comprehensions together. Live coding is a great way to learn programming as it allows you to see the process of writing code in real-time, including how to deal with unexpected issues and debug errors."
  },
  {
    "objectID": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html#objectives",
    "href": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html#objectives",
    "title": "Live Coding Session",
    "section": "Objectives",
    "text": "Objectives\n\nUnderstand the fundamentals of [concept].\nApply [concept] in practical examples.\nDevelop the ability to troubleshoot and debug in a live setting."
  },
  {
    "objectID": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html#getting-started",
    "href": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html#getting-started",
    "title": "Live Coding Session",
    "section": "Getting Started",
    "text": "Getting Started\nTo get the most out of this session, please follow these guidelines:\n\nPrepare Your Environment:\n\nMake sure JupyterLab is up and running on your machine.\nOpen a new Jupyter notebook where you can write your own code as we go along.\n\nParticipation:\n\nTry to code along with me during the session.\nFeel free to ask questions at any time. Remember, if you have a question, others probably do too!\n\nResources:\n\nI will be sharing snippets of code and notes. Make sure to take your own notes and save snippets in your notebook for future reference."
  },
  {
    "objectID": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html#session-format",
    "href": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html#session-format",
    "title": "Live Coding Session",
    "section": "Session Format",
    "text": "Session Format\n\nIntroduction\n\nBrief discussion about the topic and its importance in data science.\n\n\n\nDemonstration\n\nI will demonstrate code examples live. Follow along and write the code into your own Jupyter notebook.\n\n\n\nPractice\n\nYou will have the opportunity to try exercises on your own to apply what you’ve learned.\n\n\n\nQ&A\n\nWe will have a Q&A session at the end where you can ask specific questions about the code, concepts, or issues encountered during the session."
  },
  {
    "objectID": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html#after-the-session",
    "href": "course-materials/live-coding/live-coding-instructor/2d_list_comprehensions_notes.html#after-the-session",
    "title": "Live Coding Session",
    "section": "After the Session",
    "text": "After the Session\n\nReview your notes and try to replicate the exercises on your own.\nExperiment with the code by modifying parameters or adding new features to deepen your understanding.\nPrepare for the next session by reading any provided materials or completing any pre-session tasks.\n\n\nRemember, the key to benefiting from live coding is participation and practice. Let’s dive in and start coding!"
  },
  {
    "objectID": "course-materials/live-coding/2d_instructor_notes.html",
    "href": "course-materials/live-coding/2d_instructor_notes.html",
    "title": "Live Coding Session [Instructor Notes]",
    "section": "",
    "text": "This session introduces list and dictionary comprehensions, providing a comparison to traditional control flow methods. The goal is to help students understand the advantages of using comprehensions in Python and to practice writing their own.\nThe session is designed to be completed in 45 minutes, including setting up the notebook."
  },
  {
    "objectID": "course-materials/live-coding/2d_instructor_notes.html#overview",
    "href": "course-materials/live-coding/2d_instructor_notes.html#overview",
    "title": "Live Coding Session [Instructor Notes]",
    "section": "",
    "text": "This session introduces list and dictionary comprehensions, providing a comparison to traditional control flow methods. The goal is to help students understand the advantages of using comprehensions in Python and to practice writing their own.\nThe session is designed to be completed in 45 minutes, including setting up the notebook."
  },
  {
    "objectID": "course-materials/live-coding/2d_instructor_notes.html#setting-up-your-notebook-5-minutes",
    "href": "course-materials/live-coding/2d_instructor_notes.html#setting-up-your-notebook-5-minutes",
    "title": "Live Coding Session [Instructor Notes]",
    "section": "1. Setting Up Your Notebook (5 minutes)",
    "text": "1. Setting Up Your Notebook (5 minutes)\nGoal: Start by having students set up their Jupyter notebook with markdown headers. This helps organize the session into distinct sections, making it easier for them to follow along and refer back to their work later.\n\nInstructions:\n\nCreate a new Jupyter notebook or open an existing one for this session.\nAdd markdown cells with the following headers, using ## for each header.\nPlace code cells between the headers where you’ll write and execute your code.\n\n\n\nHeader Texts:\n\nFirst markdown cell:\n## Review: Traditional Control Flow Approaches\nSecond markdown cell:\n## Introduction to List Comprehensions\nThird markdown cell:\n## Introduction to Dictionary Comprehensions\nFourth markdown cell:\n## Using Conditional Logic in Comprehensions\nFifth markdown cell:\n## Summary and Best Practices\nSixth markdown cell:\n## Reflections"
  },
  {
    "objectID": "course-materials/live-coding/2d_instructor_notes.html#traditional-control-flow-approaches-8-minutes",
    "href": "course-materials/live-coding/2d_instructor_notes.html#traditional-control-flow-approaches-8-minutes",
    "title": "Live Coding Session [Instructor Notes]",
    "section": "2. Traditional Control Flow Approaches (8 minutes)",
    "text": "2. Traditional Control Flow Approaches (8 minutes)\nGoal: Begin by showing students how they might traditionally create lists and dictionaries using loops. This will set the stage for introducing comprehensions as a more concise alternative.\n\nExample 1: Creating a List with a for Loop\n\n# Traditional approach to creating a list of squares\nsquares = []\nfor i in range(1, 6):\n    squares.append(i ** 2)\n\nprint(squares)  # Output: [1, 4, 9, 16, 25]\n\n[1, 4, 9, 16, 25]\n\n\n\n\nExample 2: Creating a Dictionary with a for Loop\nScenario: Suppose we have two lists—one of Roman numerals and one of corresponding Arabic numbers—and we want to create a dictionary that maps each Roman numeral to its Arabic equivalent.\n\nUsing zip\n\n# Lists of Roman numerals and their Arabic equivalents\nroman = ['I', 'II', 'III', 'IV', 'V']\narabic = [1, 2, 3, 4, 5]\n\n# Traditional approach to creating a dictionary from two lists using zip\nroman_to_arabic = {}\nfor r, a in zip(roman, arabic):\n    roman_to_arabic[r] = a\n\nprint(roman_to_arabic)  # Output: {'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5}\n\n{'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5}\n\n\n\n\nWithout Using zip\n\n# Traditional approach without zip, using index\nroman_to_arabic = {}\nfor i in range(len(roman)):\n    roman_to_arabic[roman[i]] = arabic[i]\n\nprint(roman_to_arabic)  # Output: {'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5}\n\n{'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5}"
  },
  {
    "objectID": "course-materials/live-coding/2d_instructor_notes.html#introduction-to-list-comprehensions-7-minutes",
    "href": "course-materials/live-coding/2d_instructor_notes.html#introduction-to-list-comprehensions-7-minutes",
    "title": "Live Coding Session [Instructor Notes]",
    "section": "3. Introduction to List Comprehensions (7 minutes)",
    "text": "3. Introduction to List Comprehensions (7 minutes)\nGoal: Introduce list comprehensions as a more compact and expressive way to create lists.\n\nExample 1: List Comprehension for Squares\n\n# List comprehension for generating squares\nsquares = [i ** 2 for i in range(1, 6)]\n\nprint(squares)  # Output: [1, 4, 9, 16, 25]\n\n[1, 4, 9, 16, 25]\n\n\n\n\nPractice List Comprehension\nInstruction: Ask students to write a list comprehension that generates a list of cubes for numbers from 1 to 5.\nAnswer Code:\n\n# Answer: List comprehension for generating cubes\ncubes = [i ** 3 for i in range(1, 6)]\n\nprint(cubes)  # Output: [1, 8, 27, 64, 125]\n\n[1, 8, 27, 64, 125]"
  },
  {
    "objectID": "course-materials/live-coding/2d_instructor_notes.html#introduction-to-dictionary-comprehensions-7-minutes",
    "href": "course-materials/live-coding/2d_instructor_notes.html#introduction-to-dictionary-comprehensions-7-minutes",
    "title": "Live Coding Session [Instructor Notes]",
    "section": "4. Introduction to Dictionary Comprehensions (7 minutes)",
    "text": "4. Introduction to Dictionary Comprehensions (7 minutes)\nGoal: Transition to dictionary comprehensions, using the Roman numeral example to demonstrate how to map keys to values concisely.\n\nExample 1: Dictionary Comprehension for Roman to Arabic Conversion\n\nUsing zip\n\n# Dictionary comprehension for mapping Roman numerals to Arabic numbers using zip\nroman_to_arabic = {r: a for r, a in zip(roman, arabic)}\n\nprint(roman_to_arabic)  # Output: {'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5}\n\n{'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5}\n\n\n\n\nWithout Using zip\n\n# Dictionary comprehension without zip, using index\nroman_to_arabic = {roman[i]: arabic[i] for i in range(len(roman))}\n\nprint(roman_to_arabic)  # Output: {'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5}\n\n{'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5}\n\n\n\n\n\nPractice Dictionary Comprehension\nInstruction: Ask students to create a dictionary comprehension that maps the first five letters of the alphabet (‘A’, ‘B’, ‘C’, ‘D’, ‘E’) to their corresponding positions in the alphabet (1, 2, 3, 4, 5).\nAnswer Code:\n\n# Answer: Dictionary comprehension for mapping letters to positions\nletters = ['A', 'B', 'C', 'D', 'E']\npositions = [1, 2, 3, 4, 5]\n\n# Using zip\nletter_to_position = {l: p for l, p in zip(letters, positions)}\n\nletter_to_position  # Output: {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}\n\n# Without using zip\nletter_to_position = {letters[i]: positions[i] for i in range(len(letters))}\n\nprint(letter_to_position)  # Output: {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}\n\n{'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}"
  },
  {
    "objectID": "course-materials/live-coding/2d_instructor_notes.html#using-conditional-logic-in-comprehensions-7-minutes",
    "href": "course-materials/live-coding/2d_instructor_notes.html#using-conditional-logic-in-comprehensions-7-minutes",
    "title": "Live Coding Session [Instructor Notes]",
    "section": "5. Using Conditional Logic in Comprehensions (7 minutes)",
    "text": "5. Using Conditional Logic in Comprehensions (7 minutes)\nGoal: Show how to incorporate conditional logic within comprehensions to filter elements.\n\nExample 1: List Comprehension with a Condition\n\n# List comprehension with a condition for even squares\nsquares_gt_10 = [i ** 2 for i in range(1, 6) if i &gt; 10]\n\nprint(squares_gt_10)  # Output: [16, 25]\n\n[]\n\n\n\n\nExample 2: Dictionary Comprehension with a Condition\n\n# Dictionary comprehension with a condition for selecting even numbers\nno_v_roman_to_arabic = {r: a for r, a in zip(roman, arabic) if 'V' not in r}\n\nprint(no_v_roman_to_arabic)  # Output: {'I': 1, 'II': 2, 'III': 3}\n\n{'I': 1, 'II': 2, 'III': 3}\n\n\n\n\nPractice with Conditions\nInstruction: Ask students to write a list comprehension that generates a list of cubes for odd numbers from 1 to 5.\nAnswer Code:\n\n# Answer: List comprehension for generating cubes of odd numbers\nodd_cubes = [i ** 3 for i in range(1, 6) if i % 2 != 0]\n\nprint(odd_cubes)  # Output: [1, 27, 125]\n\n[1, 27, 125]"
  },
  {
    "objectID": "course-materials/live-coding/2d_instructor_notes.html#summary-and-best-practices-4-minutes",
    "href": "course-materials/live-coding/2d_instructor_notes.html#summary-and-best-practices-4-minutes",
    "title": "Live Coding Session [Instructor Notes]",
    "section": "6. Summary and Best Practices (4 minutes)",
    "text": "6. Summary and Best Practices (4 minutes)\nGoal: Summarize the key points of using comprehensions and offer best practices to avoid common pitfalls.\n\nBest Practices:\n\nUse comprehensions for simple transformations and filtering.\nAvoid overly complex nested comprehensions.\nWhen logic is complex, consider using traditional loops for clarity."
  },
  {
    "objectID": "course-materials/live-coding/2d_instructor_notes.html#conclusion-2-minutes",
    "href": "course-materials/live-coding/2d_instructor_notes.html#conclusion-2-minutes",
    "title": "Live Coding Session [Instructor Notes]",
    "section": "7. Conclusion (2 minutes)",
    "text": "7. Conclusion (2 minutes)\nGoal: Wrap up the session by encouraging students to practice using comprehensions in their own code. Remind them of the exercises they completed and suggest reviewing their work to reinforce learning."
  },
  {
    "objectID": "course-materials/live-coding/dictionaries.html",
    "href": "course-materials/live-coding/dictionaries.html",
    "title": "[Live Coding] Session 2B",
    "section": "",
    "text": "Introduction to Dictionaries (5 minutes)\nCreating and Accessing Dictionaries (10 minutes)\nManipulating Dictionaries (10 minutes)\nIterating Over Dictionaries (5 minutes)\nStoring Structured Data Using Dictionaries (10 minutes)\nPractical Application in Data Science (5 minutes)\n\n\n\n\n\n\nObjective: Introduce what dictionaries are and their importance in Python.\nKey Points:\n\nDefinition: Dictionaries are collections of key-value pairs.\nUnordered and indexed by keys, making data access fast and efficient.\n\nLive Code Example:\n\nexample_dict = {'name': 'Earth', 'moons': 1}\nprint(\"Example dictionary:\", example_dict)\n\nExample dictionary: {'name': 'Earth', 'moons': 1}\n\n\n\n\n\n\n\nObjective: Show how to create dictionaries using different methods and how to access elements.\nKey Points:\n\nCreating dictionaries using curly braces {} and the dict() constructor.\nAccessing values using keys, demonstrating safe access with .get().\n\nLive Code Example:\n\n# Creating a dictionary using dict()\nanother_dict = dict(name='Mars', moons=2)\nprint(\"Another dictionary (dict()):\", another_dict)\n\nanother_dict2 = {'name': 'Mars',\n                'moons': 2\n              }\n\nprint(\"Another dictionary ({}):\", another_dict2)\nprint(\"Are they the same?\", another_dict==another_dict2)\n\n# Accessing elements\nprint(\"Temperature using get (no default):\", example_dict.get('temp'))\nprint(\"Temperature using get (with default):\", example_dict.get('temp', 'No temperature data'))\n\nAnother dictionary (dict()): {'name': 'Mars', 'moons': 2}\nAnother dictionary ({}): {'name': 'Mars', 'moons': 2}\nAre they the same? True\nTemperature using get (no default): None\nTemperature using get (with default): No temperature data\n\n\n\n\n\n\n\nObjective: Teach how to add, update, delete dictionary items.\nKey Points:\n\nAdding and updating by assigning values to keys.\nRemoving items using del and pop().\n\nLive Code Example:\n\n# Adding a new key-value pair\nanother_dict['atmosphere'] = 'thin'\nprint(\"Updated with atmosphere:\", another_dict)\n\n# Removing an entry using del\ndel another_dict['atmosphere']\nprint(\"After deletion:\", another_dict)\n\n# Removing an entry using pop\nmoons = another_dict.pop('moons', 'No moons key found')\nprint(\"Removed moons:\", moons)\nprint(\"After popping moons:\", another_dict)\n\nUpdated with atmosphere: {'name': 'Mars', 'moons': 2, 'atmosphere': 'thin'}\nAfter deletion: {'name': 'Mars', 'moons': 2}\nRemoved moons: 2\nAfter popping moons: {'name': 'Mars'}\n\n\n\n\n\n\n\nObjective: Explain how to iterate over dictionary keys, values, and key-value pairs.\nKey Points:\n\nUsing .keys(), .values(), and .items() for different iteration needs.\n\nLive Code Example:\n\n# Creating a new dictionary for iteration examples\niteration_dict = {'planet': 'Earth', 'moons': 1, 'orbit': 'Sun'}\n\n# Iterating over keys\nprint(\"Keys:\")\nfor key in iteration_dict.keys():\n    print(f\"Key: {key}\")\n\n# Iterating over values\nprint(\"\\nValues:\")\nfor value in iteration_dict.values():\n    print(f\"Value: {value}\")\n\n# Iterating over items\nprint(\"\\nKey-Value Pairs:\")\nfor key, value in iteration_dict.items():\n    print(f\"{key}: {value}\")\n\nKeys:\nKey: planet\nKey: moons\nKey: orbit\n\nValues:\nValue: Earth\nValue: 1\nValue: Sun\n\nKey-Value Pairs:\nplanet: Earth\nmoons: 1\norbit: Sun\n\n\nAdditional Notes:\n\nThe dict.keys(), dict.values(), and dict.items() methods are used to return view objects that provide a dynamic view on the dictionary’s keys, values, and key-value pairs respectively.\nThese views are iterable and reflect changes to the dictionary, making them highly useful for looping and other operations that involve dictionary elements.\nWhat Each Function Returns\n\ndict.keys():\n\n\nReturns a view object displaying all the keys in the dictionary (default)\nUseful for iterating over keys or checking if certain keys exist within the dictionary.\n\n\ndict.values():\n\n\nReturns a view object that contains all the values in the dictionary.\nThis is helpful for operations that need to access every value, such as aggregations or conditions applied to dictionary values.\n\n\ndict.items():\n\n\nReturns a view object with tuples containing (key, value) pairs.\nExtremely useful for looping through both keys and values simultaneously, allowing operations that depend on both elements.\n\nThese methods are particularly useful in data analysis, data cleaning, or any task where data stored in dictionaries needs systematic processing.\nTo learn more about how these iterables can be utilized in Python, you can visit the official Python documentation on iterables and iterators: Python Iterables and Iterators Documentation\n\n\n\n\n\n\nObjective: Show how dictionaries can handle complex, structured data.\nKey Points:\n\nNested dictionaries and lists to create multi-dimensional data structures.\n\nLive Code Example:\n\n# Nested dictionary for environmental data\nenvironmental_data = {\n  'Location A': {'temperature': 19, 'conditions': ['sunny', 'dry']},\n  'Location B': {'temperature': 22, 'conditions': ['rainy', 'humid']}\n}\nprint(\"Environmental data for Location A:\", environmental_data['Location A']['conditions'])\n\nEnvironmental data for Location A: ['sunny', 'dry']\n\n\n\n\n\n\n\nObjective: Demonstrate the use of dictionaries in data science for data aggregation.\nKey Points:\n\nUsing dictionaries to count occurrences and summarize data.\n\nLive Code Example:\n\nweather_log = ['sunny', 'rainy', 'sunny', 'cloudy', 'sunny', 'rainy']\nweather_count = {}\nfor condition in weather_log:\n    weather_count[condition] = weather_count.get(condition, 0) + 1\nprint(\"Weather condition counts:\", weather_count)\n\nWeather condition counts: {'sunny': 3, 'rainy': 2, 'cloudy': 1}\n\n\n\n\n\n\n\n\nRecap: Highlight the flexibility and power of dictionaries in Python programming, especially for data manipulation and structured data operations."
  },
  {
    "objectID": "course-materials/live-coding/dictionaries.html#session-outline",
    "href": "course-materials/live-coding/dictionaries.html#session-outline",
    "title": "[Live Coding] Session 2B",
    "section": "",
    "text": "Introduction to Dictionaries (5 minutes)\nCreating and Accessing Dictionaries (10 minutes)\nManipulating Dictionaries (10 minutes)\nIterating Over Dictionaries (5 minutes)\nStoring Structured Data Using Dictionaries (10 minutes)\nPractical Application in Data Science (5 minutes)\n\n\n\n\n\n\nObjective: Introduce what dictionaries are and their importance in Python.\nKey Points:\n\nDefinition: Dictionaries are collections of key-value pairs.\nUnordered and indexed by keys, making data access fast and efficient.\n\nLive Code Example:\n\nexample_dict = {'name': 'Earth', 'moons': 1}\nprint(\"Example dictionary:\", example_dict)\n\nExample dictionary: {'name': 'Earth', 'moons': 1}\n\n\n\n\n\n\n\nObjective: Show how to create dictionaries using different methods and how to access elements.\nKey Points:\n\nCreating dictionaries using curly braces {} and the dict() constructor.\nAccessing values using keys, demonstrating safe access with .get().\n\nLive Code Example:\n\n# Creating a dictionary using dict()\nanother_dict = dict(name='Mars', moons=2)\nprint(\"Another dictionary (dict()):\", another_dict)\n\nanother_dict2 = {'name': 'Mars',\n                'moons': 2\n              }\n\nprint(\"Another dictionary ({}):\", another_dict2)\nprint(\"Are they the same?\", another_dict==another_dict2)\n\n# Accessing elements\nprint(\"Temperature using get (no default):\", example_dict.get('temp'))\nprint(\"Temperature using get (with default):\", example_dict.get('temp', 'No temperature data'))\n\nAnother dictionary (dict()): {'name': 'Mars', 'moons': 2}\nAnother dictionary ({}): {'name': 'Mars', 'moons': 2}\nAre they the same? True\nTemperature using get (no default): None\nTemperature using get (with default): No temperature data\n\n\n\n\n\n\n\nObjective: Teach how to add, update, delete dictionary items.\nKey Points:\n\nAdding and updating by assigning values to keys.\nRemoving items using del and pop().\n\nLive Code Example:\n\n# Adding a new key-value pair\nanother_dict['atmosphere'] = 'thin'\nprint(\"Updated with atmosphere:\", another_dict)\n\n# Removing an entry using del\ndel another_dict['atmosphere']\nprint(\"After deletion:\", another_dict)\n\n# Removing an entry using pop\nmoons = another_dict.pop('moons', 'No moons key found')\nprint(\"Removed moons:\", moons)\nprint(\"After popping moons:\", another_dict)\n\nUpdated with atmosphere: {'name': 'Mars', 'moons': 2, 'atmosphere': 'thin'}\nAfter deletion: {'name': 'Mars', 'moons': 2}\nRemoved moons: 2\nAfter popping moons: {'name': 'Mars'}\n\n\n\n\n\n\n\nObjective: Explain how to iterate over dictionary keys, values, and key-value pairs.\nKey Points:\n\nUsing .keys(), .values(), and .items() for different iteration needs.\n\nLive Code Example:\n\n# Creating a new dictionary for iteration examples\niteration_dict = {'planet': 'Earth', 'moons': 1, 'orbit': 'Sun'}\n\n# Iterating over keys\nprint(\"Keys:\")\nfor key in iteration_dict.keys():\n    print(f\"Key: {key}\")\n\n# Iterating over values\nprint(\"\\nValues:\")\nfor value in iteration_dict.values():\n    print(f\"Value: {value}\")\n\n# Iterating over items\nprint(\"\\nKey-Value Pairs:\")\nfor key, value in iteration_dict.items():\n    print(f\"{key}: {value}\")\n\nKeys:\nKey: planet\nKey: moons\nKey: orbit\n\nValues:\nValue: Earth\nValue: 1\nValue: Sun\n\nKey-Value Pairs:\nplanet: Earth\nmoons: 1\norbit: Sun\n\n\nAdditional Notes:\n\nThe dict.keys(), dict.values(), and dict.items() methods are used to return view objects that provide a dynamic view on the dictionary’s keys, values, and key-value pairs respectively.\nThese views are iterable and reflect changes to the dictionary, making them highly useful for looping and other operations that involve dictionary elements.\nWhat Each Function Returns\n\ndict.keys():\n\n\nReturns a view object displaying all the keys in the dictionary (default)\nUseful for iterating over keys or checking if certain keys exist within the dictionary.\n\n\ndict.values():\n\n\nReturns a view object that contains all the values in the dictionary.\nThis is helpful for operations that need to access every value, such as aggregations or conditions applied to dictionary values.\n\n\ndict.items():\n\n\nReturns a view object with tuples containing (key, value) pairs.\nExtremely useful for looping through both keys and values simultaneously, allowing operations that depend on both elements.\n\nThese methods are particularly useful in data analysis, data cleaning, or any task where data stored in dictionaries needs systematic processing.\nTo learn more about how these iterables can be utilized in Python, you can visit the official Python documentation on iterables and iterators: Python Iterables and Iterators Documentation\n\n\n\n\n\n\nObjective: Show how dictionaries can handle complex, structured data.\nKey Points:\n\nNested dictionaries and lists to create multi-dimensional data structures.\n\nLive Code Example:\n\n# Nested dictionary for environmental data\nenvironmental_data = {\n  'Location A': {'temperature': 19, 'conditions': ['sunny', 'dry']},\n  'Location B': {'temperature': 22, 'conditions': ['rainy', 'humid']}\n}\nprint(\"Environmental data for Location A:\", environmental_data['Location A']['conditions'])\n\nEnvironmental data for Location A: ['sunny', 'dry']\n\n\n\n\n\n\n\nObjective: Demonstrate the use of dictionaries in data science for data aggregation.\nKey Points:\n\nUsing dictionaries to count occurrences and summarize data.\n\nLive Code Example:\n\nweather_log = ['sunny', 'rainy', 'sunny', 'cloudy', 'sunny', 'rainy']\nweather_count = {}\nfor condition in weather_log:\n    weather_count[condition] = weather_count.get(condition, 0) + 1\nprint(\"Weather condition counts:\", weather_count)\n\nWeather condition counts: {'sunny': 3, 'rainy': 2, 'cloudy': 1}\n\n\n\n\n\n\n\n\nRecap: Highlight the flexibility and power of dictionaries in Python programming, especially for data manipulation and structured data operations."
  }
]