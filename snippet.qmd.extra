
**Note** If your `Series` doesn't have a name, you can still export it, but the header will be `Unnamed` unless you provide one. We will learn a lot more about working with `Series` and `DataFrames` in the coming days!

It's also easy to write your analyses to many other file types.

```{python}
#| echo: true
#| include: true

# 1. Export to CSV (Comma-Separated Values)
monthly_means.to_csv("monthly_means.csv", header=True)

# 2. Export to Excel (requires openpyxl)
# monthly_means.to_excel("monthly_means.xlsx", header=True)

# 3. Export to JSON (Javascript Serialized Object Notation)
monthly_means.to_json("monthly_means.json", orient="index")

# 4. Export to Pickle (Serialized binary format)
monthly_means.to_pickle("monthly_means.pkl")
```

---
10. **Saving Figures as Images**

Of course, you can also export your images and figures into a variety of file formats. 

Let's look at an example that demonstrates how to save figures generated with `matplotlib` in common image formats. I'll also highlight the most important options you can use when saving these images.

#### Example Code: Saving Figures as Common Image Formats

```{python}
#| echo: true
#| include: true

# Sample data so we can make a really simple figure!
x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 7, 11]

# Create a simple line plot
plt.figure(figsize=(8, 6))  # Set figure size
plt.plot(x, y, marker='o', linestyle='-', color='b', label='Sample Data')
plt.title("Sample Plot")
plt.xlabel("X-axis Label")
plt.ylabel("Y-axis Label")
plt.legend()

# 1. Save as PNG (Portable Network Graphics)
plt.savefig("sample_plot.png", dpi=300, bbox_inches='tight')

# 2. Save as JPEG (Joint Photographic Experts Group)
plt.savefig("sample_plot.jpg", format='jpeg', dpi=300, bbox_inches='tight')

# 3. Save as PDF (Portable Document Format)
plt.savefig("sample_plot.pdf", bbox_inches='tight')

# 4. Save as SVG (Scalable Vector Graphics)
plt.savefig("sample_plot.svg", bbox_inches='tight')

# 5. Save as TIFF (Tagged Image File Format)
plt.savefig("sample_plot.tiff", dpi=300, bbox_inches='tight')

# Display the plot (optional)
plt.show()
```

#### Explanation of Each Format and Key Options:

1. **PNG (Portable Network Graphics)**
   - **Code:** `plt.savefig("sample_plot.png", dpi=300, bbox_inches='tight')`
   - **Usage:** PNG is a lossless image format ideal for high-quality graphics and images with transparency.
   - **Options:**
     - **dpi:** Dots per inch, controls the resolution. Higher values produce higher-quality images. `dpi=300` is common for publication-quality images.
     - **bbox_inches='tight':** Trims the whitespace around the figure, ensuring a tight layout.

2. **JPEG (Joint Photographic Experts Group)**
   - **Code:** `plt.savefig("sample_plot.jpg", dpi=300, bbox_inches='tight')`
   - **Usage:** JPEG is a lossy compression format best suited for photographs. It is not ideal for images with sharp edges or text. The  compression used by matplotlib is 75 on a scale from 0-100 (100 is best quality, least compression)
   - **Options:**
     - **dpi:** Resolution, same as with PNG.

3. **PDF (Portable Document Format)**
   - **Code:** `plt.savefig("sample_plot.pdf", bbox_inches='tight')`
   - **Usage:** PDF is a vector format, ideal for documents and scalable graphics. It preserves quality at any zoom level. For this reason, it can create very large files if you are exporting an image with thousands to millions of points, so be careful!
   - **Options:**
     - **bbox_inches='tight':** Ensures a tight layout without unnecessary whitespace.

4. **SVG (Scalable Vector Graphics)**
   - **Code:** `plt.savefig("sample_plot.svg", bbox_inches='tight')`
   - **Usage:** SVG is a vector format that is widely used on the web. It's easier to edit than a PDF, and itâ€™s ideal for smaller-sized graphics that need to scale without losing quality. It will generally make figures that are larger than PDFs, so this format is not a good choice for complicated plots!
   - **Options:**
     - **bbox_inches='tight':** Again, this option is useful to ensure a tight layout.

5. **TIFF (Tagged Image File Format)**
   - **Code:** `plt.savefig("sample_plot.tiff", dpi=300, bbox_inches='tight')`
   - **Usage:** TIFF is a lossless format often used in professional environments, especially for printing and scanning.
   - **Options:**
     - **dpi:** Higher DPI settings ensure better quality, especially important for print.

