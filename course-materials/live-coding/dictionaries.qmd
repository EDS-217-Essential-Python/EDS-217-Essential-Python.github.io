---
title: "[Live Coding] Session 2B"
subtitle: "Dictionaries"
editor_options: 
  chunk_output_type: console
---

## Session Outline:

1. **Introduction to Dictionaries** (5 minutes)
2. **Creating and Accessing Dictionaries** (10 minutes)
3. **Manipulating Dictionaries** (10 minutes)
4. **Iterating Over Dictionaries** (5 minutes)
5. **Storing Structured Data Using Dictionaries** (10 minutes)
6. **Practical Application in Data Science** (5 minutes)

### Detailed Instructor Notes:

#### I. Introduction to Dictionaries
- **Objective**: Introduce what dictionaries are and their importance in Python.
- **Key Points**:
  - Definition: Dictionaries are collections of key-value pairs.
  - Unordered and indexed by keys, making data access fast and efficient.
- **Live Code Example**:
  ```{python}
  #| echo: true
  example_dict = {'name': 'Earth', 'moons': 1}
  print("Example dictionary:", example_dict)
  ```

#### II. Creating and Accessing Dictionaries
- **Objective**: Show how to create dictionaries using different methods and how to access elements.
- **Key Points**:
  - Creating dictionaries using curly braces `{}` and the `dict()` constructor.
  - Accessing values using keys, demonstrating safe access with `.get()`.
- **Live Code Example**:
  ```{python}
  #| echo: true
  # Creating a dictionary using dict()
  another_dict = dict(name='Mars', moons=2)
  print("Another dictionary (dict()):", another_dict)

  another_dict2 = {'name': 'Mars',
                  'moons': 2
                }

  print("Another dictionary ({}):", another_dict2)
  print("Are they the same?", another_dict==another_dict2)
  
  # Accessing elements
  print("Temperature using get (no default):", example_dict.get('temp'))
  print("Temperature using get (with default):", example_dict.get('temp', 'No temperature data'))
  ```

#### III. Manipulating Dictionaries
- **Objective**: Teach how to add, update, delete dictionary items.
- **Key Points**:
  - Adding and updating by assigning values to keys.
  - Removing items using `del` and `pop()`.
- **Live Code Example**:
  ```{python}
  #| echo: true
  # Adding a new key-value pair
  another_dict['atmosphere'] = 'thin'
  print("Updated with atmosphere:", another_dict)

  # Removing an entry using del
  del another_dict['atmosphere']
  print("After deletion:", another_dict)

  # Removing an entry using pop
  moons = another_dict.pop('moons', 'No moons key found')
  print("Removed moons:", moons)
  print("After popping moons:", another_dict)
  ```

#### IV. Iterating Over Dictionaries
- **Objective**: Explain how to iterate over dictionary keys, values, and key-value pairs.
- **Key Points**:
  - Using `.keys()`, `.values()`, and `.items()` for different iteration needs.
- **Live Code Example**:
  ```{python}
  #| echo: true
  # Creating a new dictionary for iteration examples
  iteration_dict = {'planet': 'Earth', 'moons': 1, 'orbit': 'Sun'}

  # Iterating over keys
  print("Keys:")
  for key in iteration_dict.keys():
      print(f"Key: {key}")

  # Iterating over values
  print("\nValues:")
  for value in iteration_dict.values():
      print(f"Value: {value}")

  # Iterating over items
  print("\nKey-Value Pairs:")
  for key, value in iteration_dict.items():
      print(f"{key}: {value}")

  ```

- **Additional Notes**:

    - The `dict.keys()`, `dict.values()`, and `dict.items()` methods are used to return view objects that provide a dynamic view on the dictionaryâ€™s keys, values, and key-value pairs respectively. 
    - These views are [iterable](https://python.land/deep-dives/python-iterator) and reflect changes to the dictionary, making them highly useful for looping and other operations that involve dictionary elements.

    - **What Each Function Returns**

        1. **`dict.keys()`**:
        - Returns a view object displaying all the keys in the dictionary (default)
        - Useful for iterating over keys or checking if certain keys exist within the dictionary.

        2. **`dict.values()`**:
        - Returns a view object that contains all the values in the dictionary.
        - This is helpful for operations that need to access every value, such as aggregations or conditions applied to dictionary values.

        3. **`dict.items()`**:
        - Returns a view object with tuples containing (key, value) pairs.
        - Extremely useful for looping through both keys and values simultaneously, allowing operations that depend on both elements.

        These methods are particularly useful in data analysis, data cleaning, or any task where data stored in dictionaries needs systematic processing.

        To learn more about how these iterables can be utilized in Python, you can visit the official Python documentation on iterables and iterators: [Python Iterables and Iterators Documentation](https://docs.python.org/3/glossary.html#term-iterable)

#### V. Storing Structured Data Using Dictionaries
- **Objective**: Show how dictionaries can handle complex, structured data.
- **Key Points**:
  - Nested dictionaries and lists to create multi-dimensional data structures.
- **Live Code Example**:
  ```{python}
  #| echo: true
  # Nested dictionary for environmental data
  environmental_data = {
    'Location A': {'temperature': 19, 'conditions': ['sunny', 'dry']},
    'Location B': {'temperature': 22, 'conditions': ['rainy', 'humid']}
  }
  print("Environmental data for Location A:", environmental_data['Location A']['conditions'])
  ```

#### VI. Practical Application in Data Science
- **Objective**: Demonstrate the use of dictionaries in data science for data aggregation.
- **Key Points**:
  - Using dictionaries to count occurrences and summarize data.
- **Live Code Example**:
  ```{python}
  #| echo: true
  weather_log = ['sunny', 'rainy', 'sunny', 'cloudy', 'sunny', 'rainy']
  weather_count = {}
  for condition in weather_log:
      weather_count[condition] = weather_count.get(condition, 0) + 1
  print("Weather condition counts:", weather_count)
  ```

### Conclusion
- **Recap**: Highlight the flexibility and power of dictionaries in Python programming, especially for data manipulation and structured data operations.