---
title: "Live Coding Session [Instructor Notes]"
subtitle: "Control Flows"
search: false
format: 
  html:
    toc: true
    toc-depth: 2
---

# Introduction to Control Flows in Python

Control flows are essential for directing the execution of code based on logic and conditions.

## What are Control Flows?

Control flows allow your programs to execute different parts of code based on conditions, or to repeat actions, which is crucial for handling varied datasets in environmental data science.

- **Conditionals**: Execute code if a condition is true.
- **Loops**: Repeat code multiple times.

## Conditionals

Conditionals help execute actions based on specific criteria.

### Basic If Statement

**Teacher's Note**: Start with a simple if statement to check a numerical condition.

```{python}
#| echo: true
number = 5
if number > 0:
    print("Positive number")
```

**Explanation**: If `number` is greater than 0, it prints "Positive number". This is useful for filtering data based on numeric thresholds.

### Adding Else

**Teacher's Note**: Introduce the `else` statement to handle cases not met by the `if` condition.

```{python}
#| echo: true
if number > 0:
    print("Positive number")
else:
    print("Not a positive number")
```

**Explanation**: If the `if` condition fails, the `else` block will execute, ensuring that all possibilities are handled.

### Using Elif

**Teacher's Note**: Use `elif` to introduce a third logical condition.

```{python}
#| echo: true
number = 0
if number > 0:
    print("Positive number")
elif number == 0:
    print("Zero")
else:
    print("Negative number")
```

**Explanation**: `elif` allows multiple checks. Useful for classifying data into more than two categories.

## Loops

Loops repeat tasks which is essential for automating repetitive tasks.

### For Loops

**Teacher's Note**: Demonstrate a `for` loop with a list.

```{python}
#| echo: true
fruits = ['apple', 'banana', 'cherry']
for fruit in fruits:
    print(fruit)
```

**Explanation**: Loops through each item in the list `fruits` and prints it. Perfect for iterating over data records.

### While Loops

**Teacher's Note**: Show a `while` loop with a countdown.

```{python}
#| echo: true
count = 5
while count > 0:
    print(count)
    count -= 1
```

**Explanation**: This loop continues as long as `count` is greater than 0, counting down each time.

## Applying Control Flows in Data Science

Control flows can be applied for data processing such as cleaning or filtering.

### Example: Filtering Data

**Teacher's Note**: Apply a practical data filtering example using pandas.

```{python}
#| echo: true
import pandas as pd
data = pd.DataFrame({
    'Temperature': [18, 21, 24, 19, 17],
    'Weather': ['rainy', 'sunny', 'sunny', 'cloudy', 'rainy']
})

# Only select days that are sunny
sunny_days = data[data['Weather'] == 'sunny']
print(sunny_days)
```

**Explanation**: Demonstrates using conditionals to filter a pandas DataFrame for specific data entries, such as sunny days.

## Conclusion

Understanding and using control flows effectively enhances your ability to programmatically analyze and manipulate data.


**Teacher's Note**: Summarize key points and encourage students to think of other data scenarios where these techniques could be applied. Discuss or hint at upcoming topics that build on these foundations.
