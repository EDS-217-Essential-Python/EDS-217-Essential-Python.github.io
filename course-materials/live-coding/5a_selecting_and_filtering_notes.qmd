---
title: "Live Coding Session"
subtitle: "Basic Pandas Selection and Filtering"
jupyter: eds217_2024
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---

In this live coding session, we'll explore fundamental concepts of selecting and filtering data in pandas DataFrames, using examples different from our cheatsheet to broaden your understanding.

## Setup

First, let's import pandas and load our dataset.

```{python}
#| echo: true

import pandas as pd

# Load the dataset
df = pd.read_csv('https://bit.ly/eds217-studentdata')

# Display the first few rows
print(df.head())

# Display basic information about the DataFrame
print(df.info())
```

## Basic Selection

Let's start with some basic selection techniques.

```{python}
#| echo: true

# Select a single column
majors = df['major']
print("Majors:\n", majors.head())

# Select multiple columns
id_major = df[['student_id', 'major']]
print("\nStudent IDs and Majors:\n", id_major.head())

# Select rows by index
last_five = df.iloc[-5:]
print("\nLast five rows:\n", last_five)

# Select alternate rows and specific columns
alternate_rows = df.iloc[::2, [1, 3]]
print("\nAlternate rows with age and major:\n", alternate_rows.head())
```

## Filtering Based on Column Values

Now, let's explore filtering techniques.

### Single Condition Filtering

```{python}
#| echo: true

# Filter students with GPA above 3.7
high_achievers = df[df['gpa'] > 3.7]
print("High achieving students:\n", high_achievers)
```

### Multiple Conditions with Logical Operators

```{python}
#| echo: true

# Filter students who are under 20 AND majoring in Mathematics
young_math = df[(df['age'] < 20) & (df['major'] == 'Mathematics')]
print("Young Math students:\n", young_math)

# Filter students who are either 22 years old OR have a GPA of exactly 3.5
specific_students = df[(df['age'] == 22) | (df['gpa'] == 3.5)]
print("Students who are 22 or have a 3.5 GPA:\n", specific_students)
```

## Combining Selection and Filtering

Let's combine selection and filtering techniques.

```{python}
#| echo: true

# Select 'student_id' and 'major' for students with age < 21
young_students = df.loc[df['age'] < 21, ['student_id', 'major']]
print("IDs and majors of students under 21:\n", young_students)
```

## Using .isin() for Multiple Values

The `.isin()` method is useful when we want to filter based on multiple possible values.

```{python}
#| echo: true

# Filter students majoring in Engineering, Chemistry, or Physics
stem_majors = df[df['major'].isin(['Engineering', 'Chemistry', 'Physics'])]
print("STEM majors (excluding CS and Math):\n", stem_majors)
```

## Filtering with String Methods

Pandas provides string methods that can be used for filtering text data.

```{python}
#| echo: true

# Filter majors that contain the word 'Science'
science_majors = df[df['major'].str.contains('Science')]
print("Majors containing 'Science':\n", science_majors)
```

## Advanced Selection: .loc vs .iloc

Let's explore the difference between .loc and .iloc with some examples.

```{python}
#| echo: true

# Using .loc with labels
label_select = df.loc[10:15, 'age':'major']
print("Label-based selection with .loc:\n", label_select)

# Using .iloc with integer positions
position_select = df.iloc[10:15, 1:4]
print("\nInteger-based selection with .iloc:\n", position_select)
```

## Conclusion

We've covered various aspects of selection and filtering in pandas, including:
- Basic selection of columns and rows
- Single and multiple condition filtering
- Combining selection and filtering
- Using `.isin()` for multiple value matching
- String method filtering
- Advanced selection with .loc and .iloc

These techniques, different from our cheatsheet examples, provide you with a broader understanding of data manipulation in pandas. Practice with these methods to become more proficient in handling diverse datasets.