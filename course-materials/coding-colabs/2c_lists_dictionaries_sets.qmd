---
title: "Day 2: ðŸ™Œ Coding Colab"
subtitle: "Working with lists, dictionaries, and sets"
---

## Quick References

Before we begin, here are quick links to our course cheatsheets. These may be helpful during the exercise:

- [Python Basics Cheatsheet](../cheatsheets/first_steps.ipynb)
- [List Cheatsheet](../cheatsheets/lists.qmd)
- [Dictionaries Cheatsheet](../cheatsheets/dictionaries.qmd)
- [Sets Cheatsheet](../cheatsheets/sets.qmd)

Feel free to refer to these cheatsheets throughout the exercise if you need a quick reminder about syntax or functionality.

## Introduction to Paired Programming (5 minutes)

Welcome to today's Coding Colab! In this session, you'll be working in pairs to explore and reinforce your understanding of lists and dictionaries, while also discovering the unique features of sets.

### Benefits of Paired Programming

1. **Knowledge sharing**: Learn from each other's experiences and approaches.
2. **Improved code quality**: Catch errors earlier with two sets of eyes.
3. **Enhanced problem-solving**: Discuss ideas for more creative solutions.
4. **Skill development**: Improve communication and teamwork skills.

### How to Make the Most of Paired Programming

1. **Assign roles**: One person is the "driver" (typing), the other is the "navigator" (reviewing).
2. **Switch roles regularly**: Swap every 10-15 minutes to stay engaged.
3. **Communicate clearly**: Explain your thought process and ask questions.
4. **Be open to ideas**: Listen to your partner's suggestions.
5. **Stay focused**: Keep the conversation relevant to the task.

## Exercise Overview

This Coding Colab will reinforce your understanding of lists and dictionaries while introducing you to sets. You'll work through a series of tasks, discussing and implementing solutions together.

## Part 1: Lists and Dictionaries Review (15 minutes)

### Task 1: List Operations

Create a list of your favorite fruits and perform the following operations:

1. Create a list called `fruits` with at least 3 fruit names.
2. Add a new fruit to the end of the list.
3. Remove the second fruit from the list.
4. Print the final list.

```{python}
#| echo: false
#| include: false

# Example code for instructor
fruits = ["apple", "banana", "cherry"]
print("Original list:", fruits)

fruits.append("date")
print("After adding a fruit:", fruits)

del fruits[1]
print("After removing the second fruit:", fruits)

print("Final list:", fruits)
```

### Task 2: Dictionary Operations

Create a dictionary representing a simple inventory system:

1. Create a dictionary called `inventory` with at least 3 items and their quantities.
2. Add a new item to the inventory.
3. Update the quantity of an existing item.
4. Print the final inventory.

```{python}
#| echo: false
#| include: false

# Example code for instructor
inventory = {
    "apples": 50,
    "bananas": 30,
    "cherries": 25
}
print("Original inventory:", inventory)

inventory["dates"] = 40
print("After adding a new item:", inventory)

inventory["apples"] = 55
print("After updating apples quantity:", inventory)

print("Final inventory:", inventory)
```

## Part 2: Introducing Sets (15 minutes)

Here's a [Sets Cheatsheet](../cheatsheets/sets.qmd). Sets are a lot like lists, so take a look at the cheatsheet to see how they are created and manipulated!

### Task 3: Creating and Manipulating Sets

1. Create two sets: `evens` with even numbers from 2 to 10, and `odds` with odd numbers from 1 to 9.
2. Print both sets.
3. Find and print the union of the two sets.
4. Find and print the intersection of the two sets.
5. Add a new element to the `evens` set.

```{python}
#| echo: false
#| include: false

# Example code for instructor
evens = {2, 4, 6, 8, 10}
odds = {1, 3, 5, 7, 9}

print("Evens:", evens)
print("Odds:", odds)

union_set = evens.union(odds)
print("Union:", union_set)

intersection_set = evens.intersection(odds)
print("Intersection:", intersection_set)

evens.add(12)
print("Updated evens:", evens)
```

### Task 4: Set Operations vs. List Operations

Compare removing duplicates from a list using a set vs. a list comprehension:

1. Create a list with some duplicates: `numbers = [1, 2, 2, 3, 3, 3, 4, 4, 5]`
2. Use a set to remove duplicates.
3. Use a list comprehension to remove duplicates.
4. Print the results of both methods.

```{python}
#| echo: false
#| include: false

# Example code for instructor
numbers = [1, 2, 2, 3, 3, 3, 4, 4, 5]

# Using a set
unique_set = list(set(numbers))
print("Using set:", unique_set)

# Using a list comprehension
unique_list = []
[unique_list.append(x) for x in numbers if x not in unique_list]
print("Using list comprehension:", unique_list)
```

## Conclusion and Discussion (10 minutes)

As a pair, discuss the following questions:

1. What are the main differences between lists, dictionaries, and sets?
2. In what situations would you prefer to use a set over a list or dictionary?
3. How did working in pairs help you understand these concepts better?

Remember to switch roles (driver and navigator) every 10-15 minutes throughout the exercise. Good luck, and enjoy coding together!