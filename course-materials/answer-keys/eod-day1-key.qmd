---
title: "Day 1: Answer Key"
subtitle: "An Example Python Data Science Workflow"
search: false
editor_options: 
  chunk_output_type: console
---


::: {style="width: 80%; margin: auto;"}
![](https://media.arcus.org/files/styles/juicebox_medium/public/ima/images/Martinez_IMG_4771.jpg?itok=V5IY36X3)
:::
:::{.gray-text .center-text}
*Toolik from the boardwalk* (source)[https://media.arcus.org/album/polartrec-2019-alejandra-martinez/30679]
:::


### Objective

In this exercise, you will work with climate data using the Python data science workflow. You'll load the data into a pandas DataFrame, perform basic exploration and cleaning, and create visualizations. This hands-on practice will help you understand how Python can be used for data analysis, with comparisons to similar tasks in R.

### Instructions

**Setup and Data Loading**

0. **Open JupyterLab and Start a New Notebook**

1. **Import Libraries**

   - Import the necessary libraries to work with data (`pandas`) and create plots (`matplotlib.pyplot`). Use the standard python conventions that `import pandas as pd` and `import matplotlib.pyplot as plt`

```{python}
import pandas as pd
import matplotlib.pyplot as plt
```

2. **Load the Data**

Our data is located at: 

`https://raw.githubusercontent.com/environmental-data-science/eds217-day0-comp/main/data/raw_data/toolik_weather.csv`

   - Create a variable called `url` that stores the URL provided above.
   - Use the pandas library's `read_csv()` function from pandas to load the data from the URL into a new DataFrame called `df`. Any pandas function will always be called using the `pd` object and dot notation: `pd.read_csv()`

```{python}
url = 'https://raw.githubusercontent.com/environmental-data-science/eds217-day0-comp/main/data/raw_data/toolik_weather.csv'
df = pd.read_csv(url)
```

   **Syntax Similarities**: The `read_csv()` function in pandas is similar to `read.csv()` in R.

**Data Exploration**

3. **Preview the Data**

   - Use the `head()` method to display the first few rows of the DataFrame `df`. 
   
   **Note:** Because the `head()` function is a method of a DataFrame, you will call it using dot notation and the dataframe you just created: `df.head()`


```{python}
df.head()
```

   **Syntax Similarities**: In R, you would use `head(df)` to view the first few rows.

4. **Check for Missing Values**

   - Use the `isnull()` method combined with `sum()` to count missing values in each column.


```{python}
df.isnull().sum()
```

   **Hint**: In R, you might use `sum(is.na(df$column))` to check for missing values.

    **Note:** You should see that the `Daily_AirTemp_Mean_C` doesn't have any missing values. This means we can skip the usual step of dealing with missing data. We'll learn these tools in Python and Pandas later in the course. 

5. **Data Summary**

   - Use the `describe()` method to generate summary statistics for numerical columns.
   - Use the `info()` method to get an overview of the DataFrame, including data types and non-null counts. Just like the `head()` function, these are methods associated with your `df` object, so you call them with dot notation. 


```{python}
df.describe()
df.info()
```

   **Syntax Similarities**:: `summary(df)` and `str(df)` are R equivalents for summarizing and checking structure. Notice a pattern forming... Other than differences in function names (i.e. "Boot" vs. "Boot" in American/British English), a major "grammar" difference between R and Python is Python's frequent use of dot notation for calling methods of objects!

<!-- **Data Cleaning**

6. **Handle Missing Data (Optional)**

   - Choose a strategy to handle missing data in the columns. For example, fill missing values with the mean of the column using the `fillna()` method or drop rows with missing data using the `dropna()` method.


```{python}
df['Daily_AirTemp_Mean_C'].fillna(df['Daily_AirTemp_Mean_C'].mean(), inplace=True)
df.dropna(subset=['Daily_globalrad_total_jcm2'], inplace=True)
```

   **Syntax Similarities**: In R, you might use `na.omit()` or `replace_na()` from `tidyverse`. -->

**Data Analysis**

6. **Calculate Monthly Average Temperature**

   - Use the `groupby()` method to group the data by the 'Month' column and save this as a new variable called `monthly`.
   - Calculate the mean of the 'Daily_AirTemp_Mean_C' column for each month in the `monthly` using the `mean()` function. Save this result to a new variable called `monthly_means`. 

```{python}
monthly = df.groupby('Month')
monthly_means = monthly['Daily_AirTemp_Mean_C'].mean()
```

   **Note:** You can do analysis on a specific column in a dataframe using `[column_nanme]` notation: `my_df["column A"].mean()` would give the average value of "column A" (if there was a column with that name in the dataframe). In the coming days, we will spend a lot of time learning how to select and subset data in dataframes!

   **Syntax Similarities**: This analysis is similar to using `group_by()` and `summarize()` in `dplyr`.

7. **Plot Monthly Average Temperature**

   - Use the `plot()` method to create a line plot of the monthly average temperature.
   - Set appropriate titles and labels for the plot. The `plot()` function is a method of the `plt` library you imported at the start of your code. 

   **Syntax Similarity**: Use `plt.plot()` or `plot.bar()` to create plots. In R, you would use `ggplot()`.

```{python}
plt.plot(monthly_means)
```

```{python}
months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
plt.bar(months, monthly_means)
```

8. **Analyze Temperature Trends Over Years**

    - Use `groupby()` to explore how temperature trends change over the years.
    - Create a plot of the yearly average temperature trend.

    **Hint**: Similar to calculating monthly averages, group by the 'Year' column.


```{python}
year = df.groupby('Year')
yearly_means = year['Daily_AirTemp_Mean_C'].mean()
plt.plot(yearly_means)
```


```{python}
year_list = df['Year'].unique()
plt.bar(year_list, yearly_means)
```


::: {.center-text .body-text-xl .teal-text}
End Activity Session (Day 1)
:::
