---
title: "Interactive Session 4A"
subtitle: "DataFrames"
editor_options: 
  chunk_output_type: console
jupyter: eds217_2024
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---



::: {style="width: 60%; margin: auto;"}
![](images/dataframe.jpeg)
:::

:::{.gray-text .center-text}
*A cartoon panda in a frame shop.* [MidJourney 5](https://www.midjourney.com/jobs/f7787b1d-a02e-488c-932e-42a5e6c43a47?index=0)
:::


## Introduction to pandas DataFrames

In this interactive session, we'll explore the fundamental concepts of pandas DataFrames, their relationship to Series, and some essential methods for working with them.

## Setting up our environment

Let's start by importing the necessary libraries:

```{python}
#| echo: true

import pandas as pd
import numpy as np
```

## Understanding Series

Before diving into DataFrames, let's briefly review pandas Series, as they form the building blocks of DataFrames.

```{python}
#| echo: true

# Creating a Series
s = pd.Series([1, 3, 5, np.nan, 6, 8])
print(s)
```

A Series is a one-dimensional labeled array that can hold data of any type.

## Introduction to DataFrames

A DataFrame is a two-dimensional labeled data structure with columns of potentially different types. You can think of it as a table or a spreadsheet-like structure.

Let's create a simple DataFrame:

```{python}
#| echo: true

# Creating a DataFrame
df = pd.DataFrame({
    'A': [1, 2, 3, 4],
    'B': pd.date_range(start='2023-01-01', periods=4),
    'C': pd.Series(1, index=list(range(4)), dtype='float32'),
    'D': np.array([3] * 4, dtype='int32'),
    'E': pd.Categorical(["test", "train", "test", "train"]),
    'F': 'foo'
})

print(df)
```

Here, we've created a DataFrame with different types of data: integers, dates, floats, categories, and strings.

## DataFrames and Series Relationship

Each column in a DataFrame is a Series. You can access a column like this:

```{python}
#| echo: true

print(df['A'])
```

This returns a Series object. You can confirm this:

```{python}
#| echo: true

print(type(df['A']))
```

## Investigating DataFrame Structure

pandas provides several methods to investigate the structure of a DataFrame:

### 1. Shape

To get the dimensions of the DataFrame:

```{python}
#| echo: true

print(df.shape)
```

This returns a tuple where the first element is the number of rows, and the second is the number of columns.

### 2. Info

For a concise summary of the DataFrame:

```{python}
#| echo: true

df.info()
```

This method prints information about the DataFrame including the index dtype and columns, non-null values and memory usage.

### 3. Dtypes

To see the data types of each column:

```{python}
#| echo: true

print(df.dtypes)
```

### 4. Describe

To see some basic statistical details of numerical columns:

```{python}
#| echo: true

print(df.describe())
```

## Accessing DataFrame Contents

There are multiple ways to access data within a DataFrame:

### 1. Head and Tail

To view the first or last few rows:

```{python}
#| echo: true

print(df.head(2))  # First 2 rows
print("\n")
print(df.tail(2))  # Last 2 rows
```

### 2. Indexing

You can access rows and columns using various indexing methods:

```{python}
#| echo: true

# Selecting a single column
print(df['A'])

# Selecting multiple columns
print(df[['A', 'B']])

# Selecting rows by position
print(df.iloc[0])  # First row

# Selecting rows by label
print(df.loc[0])  # First row (assuming default integer index)

# Selecting both rows and columns
print(df.loc[0, 'A'])  # Value at first row of column 'A'
```

## Basic DataFrame Operations

Let's look at some basic operations you can perform on DataFrames:

### 1. Adding a new column

```{python}
#| echo: true

df['G'] = df['A'] + df['D']
print(df)
```

### 2. Applying functions to columns

Let's define a simpe function and use `apply` to apply that function to every row in a column:

```{python}
#| echo: true

def square(x):
    return x ** 2

df['A_squared'] = df['A'].apply(square)
print(df)
```

### 3. Basic statistics

```{python}
#| echo: true

print(df['A'].mean())  # Mean of column A
print(df['D'].sum())   # Sum of column D
```

## Conclusion

This session introduced you to the basics of pandas DataFrames, their relationship to Series, and some fundamental methods for exploring and manipulating them. 

In future sessions, we'll dive deeper into more advanced operations like selection, filtering, grouping, and data cleaning.

Remember, DataFrames are powerful tools for data manipulation and analysis, built upon the concept of Series. 

Understanding their structure and basic operations is crucial for effective data analysis with pandas.


::: {.center-text .body-text-xl .teal-text}
End interactive session 4A
:::
